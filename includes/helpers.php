<?php

define("NOTHING_FOUND", 0);
define("SEARCH",        1);
define("UPDATE",        2);
define("INSERT",        3);
define("DELETE",        4);

function search($search) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER
        );

        $select_query = "SELECT * FROM website WHERE website_name LIKE \"%{$search}%\" OR website_url LIKE \"%{$search}%\"";
        $statement = $db -> prepare($select_query);
        $statement -> execute();

        $select_query = "SELECT * FROM user WHERE user_name LIKE \"%{$search}%\" OR email LIKE \"%{$search}%\"";
        $statement = $db -> prepare($select_query);
        $statement -> execute();

        $select_query = "SELECT * FROM password WHERE password LIKE AESDECRYPT(\"%{$search}%\", \"" . KEYSTR . "\", " . INITVECTOR . ") USING 'utf8') AS plain_text_password OR comment LIKE \"%{$search}%\"";
        $statement = $db -> prepare($select_query);
        $statement -> execute();

        if (count($statement -> fetchAll()) == 0) {
            return 0;
        } else {
            echo "      <table>\n";
            echo "        <thead>\n";
            echo "          <tr>\n";
            echo "            <th>Artist ID</th>\n";
            echo "            <th>Artist Name</th>\n";
            echo "          </tr>\n";
            echo "        </thead>\n";
            echo "        <tbody>\n";

            // Populate the table with data coming from the database...
            foreach ($db ->query($select_query) as $row) {
                echo "          <tr>\n";
                echo "            <td>" . htmlspecialchars($row[0]) . "</td>\n";
                echo "            <td>" . htmlspecialchars($row[1]) . "</td>\n";
                echo "          </tr>\n";
            }

            echo "         </tbody>\n";
            echo "      </table>\n";
        }
    } catch( PDOException $e ) {
        echo '<p>The following message was generated by function <code>search</code>:</p>' . "\n";
        echo '<p id="error">' . $e -> getMessage() . '</p>' . "\n";
        echo "<p>There are a few reasons for this. Perhaps the database doesn’t exist or wasn’t mounted. Does the volume/drive containing the database have read and write permissions?</p>\n";
        echo '<p>Click <a href="./">here</a> to go back.</p>';

        exit;
    }
}

function update($current_attribute, $new_attribute, $query_attribute, $pattern) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER
        );
        switch ($current_attribute) {
            case 'website_name':
                $statement = $db->prepare("UPDATE website SET {$current_attribute} = :new_attribute WHERE {$query_attribute} = :pattern");
                $statement->execute(['new_attribute' => $new_attribute, 'pattern' => $pattern]);
                break;

            case 'website_url':
                $statement = $db->prepare("UPDATE website SET {$current_attribute} = :new_attribute WHERE {$query_attribute} = :pattern");
                $statement->execute(['new_attribute' => $new_attribute, 'pattern' => $pattern]);

                $statement = $db->prepare("UPDATE user SET {$current_attribute} = :new_attribute WHERE {$query_attribute} = :pattern");
                $statement->execute(['new_attribute' => $new_attribute, 'pattern' => $pattern]);

                $statement = $db->prepare("UPDATE password SET {$current_attribute} = :new_attribute WHERE {$query_attribute} = :pattern");
                $statement->execute(['new_attribute' => $new_attribute, 'pattern' => $pattern]);
                break;

            case 'user_name':
                $statement = $db->prepare("UPDATE user SET {$current_attribute} = :new_attribute WHERE {$query_attribute} = :pattern");
                $statement->execute(['new_attribute' => $new_attribute, 'pattern' => $pattern]);

                $statement = $db->prepare("UPDATE password SET {$current_attribute} = :new_attribute WHERE {$query_attribute} = :pattern");
                $statement->execute(['new_attribute' => $new_attribute, 'pattern' => $pattern]);
                break;

            case 'email':
                $statement = $db->prepare("UPDATE user SET {$current_attribute} = :new_attribute WHERE {$query_attribute} = :pattern");
                $statement->execute(['new_attribute' => $new_attribute, 'pattern' => $pattern]);
                break;

            case 'password':
                $statement = $db->prepare(
                    "UPDATE password
                    SET {$current_attribute} = AES_ENCRYPT(:new_attribute, :key, :iv))
                    WHERE {$query_attribute} = AES_ENCRYPT(:pattern, :key, :iv))"
                );
                $statement->execute([
                    'new_attribute' => $new_attribute,
                    'pattern' => $pattern,
                    'key' => KEYSTR,
                    'iv' => INITVECTOR
                ]);
                break;

            default:
                throw new Exception("Invalid column name: $current_attribute");
        }
    } catch( PDOException $e ) {
        echo '<p>The following message was generated by function <code>update</code>:</p>' . "\n";
        echo '<p id="error">' . $e -> getMessage() . '</p>' . "\n";

        exit;
    }
}

function insert($website_name, $website_url, $user_name, $email, $password, $comment) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER
        );

        $statement = $db -> prepare("INSERT INTO website VALUES (:website_name, :website_url)");
        $statement -> execute(
            array(
                'website_name' => $website_name,
                'website_url' => $website_url
            )
        );
        $statement = $db -> prepare("INSERT INTO user VALUES (:website_url, :user_name, :email)");
        $statement -> execute(
            array(
                'website_url' => $website_url,
                'user_name' => $user_name,
                'email' => $email
            )
        );

        $statement = $db -> prepare("INSERT INTO password VALUES (:website_url, :user_name, AES_ENCRYPT(\"%{$password}%\", \"" . KEYSTR . "\"), " . INITVECTOR . "), :comment)");
        $statement -> execute(
            array(
                'website_url' => $website_url,
                'user_name' => $user_name,
                'comment' => $comment
            )
        );
    } catch(PDOException $e) {
        echo '<p>The following message was generated by function <code>insert</code>:</p>' . "\n";
        echo '<p id="error">' . $e -> getMessage() . '</p>' . "\n";

        exit;
    }
}

function delete($current_attribute, $pattern) {
    try {
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER
        );
        switch ($current_attribute) {
            case 'website_name':
                $statement = $db->prepare("SELECT website_url FROM website WHERE website_name = :pattern");
                $statement->execute(['pattern' => $pattern]);
                $web_urls = $statement->fetchAll(PDO::FETCH_COLUMN);

                $statement = $db->prepare("DELETE FROM website WHERE website_name = :pattern");
                $statement->execute(['pattern' => $pattern]);

                foreach ($web_urls as $web_url) {
                    $statement = $db->prepare("DELETE FROM user WHERE website_url = :web_url");
                    $statement->execute(['web_url' => $web_url]);

                    $statement = $db->prepare("DELETE FROM password WHERE website_url = :web_url");
                    $statement->execute(['web_url' => $web_url]);
                }
                break;

            case 'website_url':
                $db->query("DELETE FROM website WHERE website_url = '$pattern'");
                $db->query("DELETE FROM user WHERE website_url = '$pattern'");
                $db->query("DELETE FROM password WHERE website_url = '$pattern'");
                break;

            case 'user_name':
                $db->query("DELETE FROM user WHERE user_name = '$pattern'");
                $db->query("DELETE FROM password WHERE user_name = '$pattern'");
                break;

            case 'email':
                $statement = $db->prepare("SELECT website_url, user_name FROM user WHERE email = :pattern");
                $statement->execute(['pattern' => $pattern]);
                $results = $statement->fetchAll(PDO::FETCH_ASSOC);

                $db->query("DELETE FROM user WHERE email = '$pattern'");

                foreach ($results as $result) {
                    $db->query("DELETE FROM password WHERE website_url = '{$result['website_url']}' AND user_name = '{$result['user_name']}'");
                }
                break;

            case 'password':
                $select_query = "DELETE FROM password WHERE password = AES_ENCRYPT(\"%{$pattern}%\", \"" . KEYSTR . "\", " . INITVECTOR . ")";
                $statement = $db -> prepare($select_query);
                $statement -> execute();
                break;

            case 'comment':
                $db->query("DELETE FROM password WHERE comment = '$pattern'");
                break;

            default:
                throw new Exception("Invalid column name: $current_attribute");
        }

    } catch(PDOException $e) {
        echo '<p>The following message was generated by function <code>delete</code>:</p>' . "\n";
        echo '<p id="error">' . $e -> getMessage() . '</p>' . "\n";

        exit;
    }
}
